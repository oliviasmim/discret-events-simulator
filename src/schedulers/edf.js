/**
 * ‚ö° EDF (EARLIEST DEADLINE FIRST) SCHEDULER
 * 
 * O EDF √© o "algoritmo inteligente" - sempre executa o processo com deadline mais pr√≥ximo
 * 
 * CARACTER√çSTICAS:
 * ‚úÖ √ìtimo para sistemas de tempo real
 * ‚úÖ Teoricamente √≥timo - se existe escalonamento que funciona, EDF encontra
 * ‚úÖ Din√¢mico - prioridades mudam conforme deadlines se aproximam
 * ‚úÖ Pode preemptar quando chega processo com deadline menor
 * ‚ùå Complexo de implementar corretamente
 * ‚ùå Pode causar starvation em processos com deadline longo
 * ‚ùå Overhead computacional para ordenar processos
 * 
 * QUANDO USAR:
 * - Sistemas de tempo real cr√≠ticos (controle de aeronaves, marca-passos)
 * - Sistemas embarcados com restri√ß√µes temporais
 * - Aplica√ß√µes multim√≠dia (streaming de v√≠deo/√°udio)
 * - Qualquer sistema onde "perder deadline" √© inaceit√°vel
 * 
 * TIPOS DE DEADLINE:
 * - Hard deadline: Perder = cat√°strofe (ex: freios ABS)
 * - Soft deadline: Perder = degrada√ß√£o (ex: frame de v√≠deo)
 * - Firm deadline: Perder = in√∫til (ex: pacote de rede)
 */

import { SchedulerBase } from '../core/SchedulerBase.js';

export default class EDF extends SchedulerBase {
  /**
   * üéØ SELE√á√ÉO DO PR√ìXIMO PROCESSO
   * 
   * Esta √© a fun√ß√£o mais complexa dos tr√™s algoritmos!
   * EDF precisa sempre escolher o processo com deadline mais pr√≥ximo.
   * 
   * ALGORITMO:
   * 1. üìä Ordena todos os processos por deadline (menor primeiro)
   * 2. ü§ù Em caso de empate, usa ordem de chegada (FCFS como desempate)
   * 3. üéØ Pega o primeiro da lista ordenada
   * 
   * @param {*} _ - Par√¢metro n√£o usado (mantido para compatibilidade)
   * @param {number} now - Tempo atual (poderia ser usado para detectar deadlines perdidos)
   * @returns {Task|null} - Processo com deadline mais pr√≥ximo
   */
  _selectNext(_, now) {
    // üìä ALGORITMO EDF: Ordena por deadline, depois por chegada
    return this.ready.sort((a, b) => {
      // üïê Primeiro crit√©rio: Deadline mais pr√≥ximo tem prioridade
      if (a.deadline !== b.deadline) {
        return a.deadline - b.deadline;  // Ordem crescente de deadline
      }
      
      // ü§ù Segundo crit√©rio: Em caso de empate, usa FCFS (ordem de chegada)
      // Isso evita comportamento n√£o-determin√≠stico
      return a.arrival - b.arrival;
    }).shift() || null;  // Pega o primeiro (menor deadline) e remove da fila
  }
  
  /**
   * üìö INFORMA√á√ïES EDUCACIONAIS
   * 
   * COMO FUNCIONA O EDF:
   * 
   * 1. üì• Processo chega com seu deadline
   * 2. üîç Sistema verifica se h√° algu√©m executando
   * 3. ‚öñÔ∏è Se processo atual tem deadline > novo processo ‚Üí PREEMP√á√ÉO!
   * 4. üéØ Sempre executa quem tem deadline mais pr√≥ximo
   * 5. üîÑ Repete a cada chegada de processo
   * 
   * EXEMPLO PR√ÅTICO:
   * P1: arrival=0, duration=3, deadline=6
   * P2: arrival=1, duration=2, deadline=4  ‚Üê deadline mais apertado!
   * P3: arrival=2, duration=1, deadline=3  ‚Üê deadline ainda mais apertado!
   * 
   * Execu√ß√£o EDF:
   * Tempo | Executando | Motivo
   * ------|------------|------------------------------------------
   * 0-1   | P1         | √önico processo dispon√≠vel
   * 1-2   | P2         | P2 tem deadline=4 < P1 deadline=6 ‚Üí PREEMP√á√ÉO
   * 2-3   | P3         | P3 tem deadline=3 < P2 deadline=4 ‚Üí PREEMP√á√ÉO
   * 3-5   | P2         | P3 terminou, P2 volta (deadline=4 < 6)
   * 5-7   | P1         | P2 terminou, P1 volta e termina
   * 
   * Todos terminaram antes de seus deadlines! ‚úÖ
   * 
   * TEORIA DOS SISTEMAS DE TEMPO REAL:
   * 
   * UTILIZA√á√ÉO = Œ£(Duration/Deadline) para todos os processos
   * - Se Utiliza√ß√£o ‚â§ 1.0 ‚Üí EDF consegue escalonar todos
   * - Se Utiliza√ß√£o > 1.0 ‚Üí Imposs√≠vel escalonar (alguns v√£o perder deadline)
   * 
   * VANTAGENS DO EDF:
   * 1. √ìTIMO: Se algum algoritmo consegue, EDF consegue
   * 2. DIN√ÇMICO: Prioridades se adaptam automaticamente
   * 3. UTILIZAC√ÉO M√ÅXIMA: Pode usar 100% da CPU de forma √≥tima
   * 
   * PROBLEMAS DO EDF:
   * 1. COMPLEXIDADE: O(n log n) para ordenar processos
   * 2. STARVATION: Processos com deadline longo podem nunca executar
   * 3. DOMINO EFFECT: Um processo perdendo deadline pode causar cascata
   * 4. IMPREVISIBILIDADE: Dif√≠cil calcular tempo de resposta worst-case
   * 
   * COMPARA√á√ÉO COM OUTROS ALGORITMOS:
   * - vs FCFS: EDF √© din√¢mico, FCFS √© est√°tico
   * - vs Round Robin: EDF prioriza urg√™ncia, RR prioriza fairness
   * - vs Priority: EDF muda prioridades automaticamente baseado no tempo
   * 
   * USO NO MUNDO REAL:
   * - Linux: Scheduler SCHED_DEADLINE usa EDF
   * - Windows: N√£o usa EDF puro, mas tem elementos similares
   * - VxWorks: Sistema operacional de tempo real usa EDF
   * - Controle automotivo: ECUs usam varia√ß√µes de EDF
   */
}
